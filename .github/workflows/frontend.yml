name: Frontend CI/CD

on:
  push:
    branches:
      - main 
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Run Next.js Linting & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install

      - name: Lint Code
        run: |
          npm run lint

      - name: Create Firebase Config File
        uses: jsdaniell/create-json@v1
        with:
          name: "firebase_config.json"
          json: ${{ secrets.FIREBASE_CONFIG }}

      - name: Convert Firebase Config to TypeScript
        run: |
          echo "export const firebaseConfig = " > firebase_config.ts
          cat firebase_config.json >> firebase_config.ts
          echo ";" >> firebase_config.ts
          cat firebase_config.ts

      - name: Create .env file
        run: |
          if [ -f ".env" ]; then
            rm .env
          fi
          
          touch .env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env

          ls -la
          cat .env

      - name: Build Next.js App
        run: |
          npm run build

  deploy:
    name: Deploy Frontend to AWS ECS
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials using IAM Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::600627329849:role/GitHubActions-Deploy-Frontend
          aws-region: us-east-2
          audience: sts.amazonaws.com
          role-session-name: GitHubActionsFrontend

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_FRONTEND }}

      - name: Build and push Docker image
        run: |
          docker build -t frontend-app .
          docker tag frontend-app:latest ${{ secrets.ECR_REPO_FRONTEND }}:latest
          docker push ${{ secrets.ECR_REPO_FRONTEND }}:latest

      - name: Deploy to AWS ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_FRONTEND }} --force-new-deployment
